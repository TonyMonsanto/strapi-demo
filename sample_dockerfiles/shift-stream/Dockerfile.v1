# syntax=docker/dockerfile:1 # From Docker Init command.  This has to be the first line

# ************** INTRODUCTION ****************

# This Dockerfile is compiled from a variety of "best practices"

# - DOCKER INIT command (DI).  For more info see: https://docs.docker.com/reference/cli/docker/init/
# - Strapi Docker docs (SD): https://docs.strapi.io/dev-docs/installation/docker
# - Bret Fisher repo (BF): https://github.com/BretFisher/nodejs-rocks-in-docker/tree/main/dockerfiles

# * * * NOTE: This Dockerfile uses NPM because Strapi v4 does not support PNPM. Strapi v5 should support PNPM (and Vite)

# From DI: If you need more help, visit the Dockerfile reference guide at https://docs.docker.com/go/dockerfile-reference/

# From BF repo and YouTube video(https://www.youtube.com/watch?v=GEPW008G250): 
# Chainguard base image is most secure and very small.  For more on Chaingaurd image details see: https://edu.chainguard.dev/chainguard/chainguard-images/reference/node-lts/tags_history/

# The version of node used in the current Chaingaurd node:latest-dev image is version 20.11.1.  This will change in the future.  If possible, you should lock the version node with a SHA tag.  This is not possible with the free version of Chaingaurd.


# ************** ARGUMENTS/VERSIONS ****************

# From BF: extremely secure and compact base image.
ARG BASE=cgr.dev/chainguard/node-lts:latest-dev

# From BF: replace NPM in CMD with tini v0.19.0 for better kernel signal handling
ARG TINI_VERSION=v0.19.0

# From DI:
ARG NODE_ENV=development


# ************** DOCKER COMMANDS ****************

FROM ${BASE}

# From Strapi Docker documentation: Installing libvips-dev for sharp Compatibility
USER root

# * * * NOTE: Chainguard (Wolfi OS) APK repo does not currently have libvips-dev.  If sharp compatibility is needed for production, will have to revisit this.

# RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev nasm bash vips-dev git.


ENV NODE_ENV=${NODE_ENV}

# From BF: set entrypoint so that you always run commands with tini
#  * * * NOTE: ARG TINI_VERSION not working for some reason, so version is hardcoded here.
ADD --chmod=755 https://github.com/krallin/tini/releases/download/v0.19.0/tini /usr/local/bin/tini

ENTRYPOINT ["/usr/local/bin/tini", "--"]

#From SD:
WORKDIR /opt/

# From SD.  This command does not seem to be needed, especially if you take advantage of caching in Docker.
# RUN npm config set fetch-retry-maxtimeout 600000 -g

RUN npm install -g node-gyp

# From DI:
# Download dependencies as a separate step to take advantage of Docker's caching.
# 1. Leverage bind mounts to package.json and package-lock.json to avoid having to copy them into
# into this layer.
# 2. Leverage a cache mount to /root/.npm to speed up subsequent builds.

# NPM CI command
    #From DI:
    # NPM Clean Install for automated deployments: https://docs.npmjs.com/cli/v10/commands/npm-ci
    # when env = production, use "--omit-dev" flag

RUN --mount=type=bind,source=/package.json,target=/package.json \
    --mount=type=bind,source=/package-lock.json,target=/package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci


# From SD: 
ENV PATH /opt/node_modules/.bin:$PATH
WORKDIR /opt/app



# From Strapi docs: Copy the rest of the source files into the image.
COPY . .


RUN chown -R node:node /opt/app

# * * * Security Best Practice: Run the application as a non-root user.

USER node

# Build Strapi and run in development mode
RUN ["npm", "run", "build"]

EXPOSE 1337

CMD ["npm", "run", "develop"]